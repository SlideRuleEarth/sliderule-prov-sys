// BSD 3-Clause License
//
// Copyright (c) 2022, University of Washington
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from
//    this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.syntax = "proto3";

syntax = "proto3";


package ps_server;

message cli_rsp {  // response of the command executed
  bool    valid     = 1;  // can we use this msg or did the cli cmd fail from exception or some other cli level error? 
  bool    updating  = 2;  // still streaming state?
  string  cmd_args  = 3;  // cmd issued with args
  string  stdout    = 4;  // output from terraform cli
  string  stderr    = 5;  // errors from terraform cli
}

// The response message from ps_server to ps_web (client)
message Response {
  bool    done              = 1;  // no more rsps in stream
  string  ps_cmd            = 2;  // ps_cmd name (e.g.'Refresh' 'Deploy' 'Update' 'Destroy')
  string  name              = 3;  // name 
  uint32  seq               = 4;  // sequence counter               
  bool    ps_server_error   = 5;  // ps_server had an error processing this request
  string  error_msg         = 6;  // error message at server level
  cli_rsp cli               = 7;  // terminal response of the command executed 
  StateOfCluster state      = 8;  // not in every msg but at end
}

// The response message from ps_server to ps_web (client)
message StateOfCluster {
  bool    valid           = 1;  // can we use this or is it not set yet
  bool    deployed        = 2;  // derived from cli output; is the cluster deployed?
  string  deployed_state  = 3;  // string from terraform state cmd; what is the current state of the cluster
  string  ip_address      = 4;  // current ip address of cluster node manager
}

// The response message from ps_web to ajax client 
message PS_AjaxResponseData {
  Response  rsp               = 1;  // response from ps_server
  bool      web_error         = 2;  // The ps web server threw and exception
  string    web_error_msg     = 3;  // The ps web server error message
  string    console_html      = 4;  // console output (stdout and stderr) converted to html
  string    last_refresh_ISO  = 5;  // UTC time of last update to db record
  string    last_refresh_TZ   = 6;  // TZ time of last update to db record
  uint32    ajax_cnt          = 7;  // the cnt from the ajax client of the current number streamed reqs msgs
}

message UpdateRequest {
  string  name  = 1; // terraform namespaced directory to use
  uint32  min_nodes = 2;
  uint32  max_nodes = 3;
  uint32  num_nodes = 4;
  string  now       = 5; 
}

message RefreshRequest {
  string  name  = 1; // terraform namespaced directory to use
  string  now       = 2; 
}

message DestroyRequest {
  string  name  = 1; // terraform namespaced directory to use
  string  now       = 2; 
}
// The SetUp Request message 
message SetUpReq {
  string  name  = 1; // terraform namespaced directory to use
  string  version   = 2; // version of terraform files to use
  bool    is_public = 3;
  string  now       = 4;
  string  spot_allocation_strategy = 5;
  double  spot_max_price = 6; 
}

// The TearDown Request message 
message TearDownReq {
  string  name  = 1; // terraform namespaced directory to use
  string  version   = 2; // version of terraform files to use
  string  now       = 3; 
}

message Stats {
  uint64 cnt  = 1;
  double avg  = 2;
  double min  = 3;
  double max  = 4;
  double std  = 5;
}

message CostAndUsageRsp{
  string    name      = 1;
  string    granularity   = 2;
  double    total         = 3;
  string    unit          = 4; 
  repeated  string tm     = 5;
  repeated  double cost   = 6;
  Stats     stats         = 7;
  bool      server_error  = 8;
  string    error_msg     = 9; 
}

message DailyHistCostReq{
  string  name  = 1;
  string  start_tm  = 2;
  string  end_tm    = 3;
}

message TodaysCostReq{
  string  name  = 1;
  string  tm        = 2; 
}

message CurrentCostReq{
  string name     = 1;
  string granularity  = 2;
  string tm           = 3; 
}

message AsgCfgsReq{
}

message AsgCfg {
  string version = 1;
  repeated string asg_cfg_options = 2;
}

message AsgCfgsRsp{
  repeated AsgCfg asg_cfg = 1;
}

message VersionsReq{
  string name = 1; // can be empty
}

message VersionsRsp{
  repeated string versions = 1;
}
message CurrentSetUpCfgReq{
  string name = 1;
}

message CurrentSetUpCfgRsp{
  SetUpReq setup_cfg = 1; // this is an exact replica of the one used
}

message PSVersionsReq{}
message PSVersionsRsp{
  string ps_versions = 1;
}

message InitReq{ // for testing only
  string name = 1;
  int32  num_nodes= 2;
}

message InitRsp{
  bool    success   = 1;
  string  error_msg = 2; 
}

message NumNodesReq{ 
  string name = 1;
  string version  = 2;
  string region   = 3;
}

message NumNodesRsp{
  string name     = 1;
  string version      = 2;
  string region       = 3;
  uint32 num_nodes    = 4;
}

service Control {
  rpc Init(InitReq) returns (InitRsp); // testing only
  rpc GetVersions(VersionsReq) returns (VersionsRsp);
  rpc GetAsgCfgs(AsgCfgsReq) returns (AsgCfgsRsp);
  rpc GetCurrentSetUpCfg(CurrentSetUpCfgReq) returns (CurrentSetUpCfgRsp);
  rpc GetPSVersions(PSVersionsReq) returns (PSVersionsRsp);
  rpc Update(UpdateRequest) returns (stream Response);
  rpc Refresh(RefreshRequest) returns (stream Response);
  rpc Destroy(DestroyRequest) returns (stream Response);
  rpc SetUp(SetUpReq) returns (stream Response);
  rpc TearDown(TearDownReq) returns (stream Response);
}

service Account { 
  rpc DailyHistCost(DailyHistCostReq) returns (CostAndUsageRsp);
  rpc TodaysCost(TodaysCostReq) returns (CostAndUsageRsp);
  rpc CurrentCost(CurrentCostReq) returns (CostAndUsageRsp);
  rpc NumNodes(NumNodesReq) returns (NumNodesRsp);
}
